
t3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000138  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000685  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a9  00000000  00000000  000008d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013f  00000000  00000000  000014a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#define F_CPU 1000000UL
#include <util/delay.h>
int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	69 97       	sbiw	r28, 0x19	; 25
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	unsigned char Ring_counter [8] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	unsigned char Johnson_counter [17] = {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF,0xFE,0xFC,0xF8,0xF0,0xE0,0xC0,0x80,0x00};
  a8:	81 e1       	ldi	r24, 0x11	; 17
  aa:	e8 e6       	ldi	r30, 0x68	; 104
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	de 01       	movw	r26, r28
  b0:	19 96       	adiw	r26, 0x09	; 9
  b2:	01 90       	ld	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	8a 95       	dec	r24
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x30>
	int a = 0, b = 0;
	DDRD |= (0 << DDB2) | (0 << DDB3) ;
  ba:	81 b3       	in	r24, 0x11	; 17
  bc:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PORTD2) | (1 << PORTD3);
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8c 60       	ori	r24, 0x0C	; 12
  c2:	82 bb       	out	0x12, r24	; 18
	DDRA |= 0xFF;
  c4:	8a b3       	in	r24, 0x1a	; 26
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  ca:	1b ba       	out	0x1b, r1	; 27

	while (1)
	{
		PORTA = 0x00;
  cc:	1b ba       	out	0x1b, r1	; 27
		if (!(PIND & (1 << PIND2)))
  ce:	82 9b       	sbis	0x10, 2	; 16
  d0:	11 c0       	rjmp	.+34     	; 0xf4 <main+0x72>
  d2:	15 c0       	rjmp	.+42     	; 0xfe <main+0x7c>
		{
			for (a = 0 ; a <= 8 ; a++)
			{
				PORTA = Ring_counter[a];
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	e8 0f       	add	r30, r24
  de:	f9 1f       	adc	r31, r25
  e0:	20 81       	ld	r18, Z
  e2:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	e7 ea       	ldi	r30, 0xA7	; 167
  e6:	f1 e6       	ldi	r31, 0x61	; 97
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x66>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x6c>
  ee:	00 00       	nop
	while (1)
	{
		PORTA = 0x00;
		if (!(PIND & (1 << PIND2)))
		{
			for (a = 0 ; a <= 8 ; a++)
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <main+0x76>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	89 30       	cpi	r24, 0x09	; 9
  fa:	91 05       	cpc	r25, r1
  fc:	5c f3       	brlt	.-42     	; 0xd4 <main+0x52>
			{
				PORTA = Ring_counter[a];
				_delay_ms(100);
			}
		}
		PORTA = 0x00;
  fe:	1b ba       	out	0x1b, r1	; 27
		if (!(PIND & (1 << PIND3)))
 100:	83 9b       	sbis	0x10, 3	; 16
 102:	11 c0       	rjmp	.+34     	; 0x126 <main+0xa4>
 104:	15 c0       	rjmp	.+42     	; 0x130 <main+0xae>
		{
			for (b = 0 ; b <= 17 ; b++)
			{
				PORTA = Johnson_counter[b];
 106:	e9 e0       	ldi	r30, 0x09	; 9
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	e8 0f       	add	r30, r24
 110:	f9 1f       	adc	r31, r25
 112:	20 81       	ld	r18, Z
 114:	2b bb       	out	0x1b, r18	; 27
 116:	e7 ea       	ldi	r30, 0xA7	; 167
 118:	f1 e6       	ldi	r31, 0x61	; 97
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x98>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x9e>
 120:	00 00       	nop
			}
		}
		PORTA = 0x00;
		if (!(PIND & (1 << PIND3)))
		{
			for (b = 0 ; b <= 17 ; b++)
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	02 c0       	rjmp	.+4      	; 0x12a <main+0xa8>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	82 31       	cpi	r24, 0x12	; 18
 12c:	91 05       	cpc	r25, r1
 12e:	5c f3       	brlt	.-42     	; 0x106 <main+0x84>
			{
				PORTA = Johnson_counter[b];
				_delay_ms(100);
			}
		}
		PORTA = 0x00;
 130:	1b ba       	out	0x1b, r1	; 27
	}
 132:	cc cf       	rjmp	.-104    	; 0xcc <main+0x4a>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
