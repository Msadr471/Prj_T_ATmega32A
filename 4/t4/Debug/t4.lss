
t4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000032a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ef9  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079c  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c6  00000000  00000000  00001b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  0000220c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000403  00000000  00000000  00002364  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000756  00000000  00000000  00002767  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002ebd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 30 01 	call	0x260	; 0x260 <main>
  7a:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_CmdWrite>:
 * Return value : none
 *
 */
void LCD_GoToLineTwo ( )
	{
		LCD_CmdWrite ( LineTwo ) ;	// Move the Cursor to Second line First Position
  82:	88 bb       	out	0x18, r24	; 24
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	8b bb       	out	0x1b, r24	; 27
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	8b bb       	out	0x1b, r24	; 27
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	84 60       	ori	r24, 0x04	; 4
  94:	8b bb       	out	0x1b, r24	; 27
  96:	00 00       	nop
  98:	8b b3       	in	r24, 0x1b	; 27
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	8b bb       	out	0x1b, r24	; 27
  9e:	89 ef       	ldi	r24, 0xF9	; 249
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_CmdWrite+0x20>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_CmdWrite+0x26>
  a8:	00 00       	nop
  aa:	08 95       	ret

000000ac <LCD_Init>:
  ac:	83 ed       	ldi	r24, 0xD3	; 211
  ae:	90 e3       	ldi	r25, 0x30	; 48
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_Init+0x4>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_Init+0xa>
  b6:	00 00       	nop
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	87 bb       	out	0x17, r24	; 23
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
  c4:	8e e0       	ldi	r24, 0x0E	; 14
  c6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
  d6:	08 95       	ret

000000d8 <LCD_Clear>:
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
  e4:	08 95       	ret

000000e6 <LCD_GoToXY>:
 */
void LCD_GoToXY ( char row , char col )
	{
		char pos ;

		if ( row < LCDMaxLines )
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	50 f4       	brcc	.+20     	; 0xfe <LCD_GoToXY+0x18>
			{
				pos = LineOne | ( row << 6 ) ; // take the line number
  ea:	20 e4       	ldi	r18, 0x40	; 64
  ec:	82 9f       	mul	r24, r18
  ee:	c0 01       	movw	r24, r0
  f0:	11 24       	eor	r1, r1
  f2:	80 68       	ori	r24, 0x80	; 128
				//row0->pos=0x80  row1->pos=0xc0

				if ( col < LCDMaxChars )
  f4:	60 31       	cpi	r22, 0x10	; 16
  f6:	08 f4       	brcc	.+2      	; 0xfa <LCD_GoToXY+0x14>
				pos = pos + col ;            //take the char number
  f8:	86 0f       	add	r24, r22
				//now pos points to the given XY pos

				LCD_CmdWrite ( pos ) ;	       // Move the Cursor to specified Position
  fa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
  fe:	08 95       	ret

00000100 <LCD_DataWrite>:
 *
 */
void LCD_DataWrite ( char dat )
	{

		databus = dat ;            // Send the data to LCD
 100:	88 bb       	out	0x18, r24	; 24
		control_bus |= 1 << rs ;	// Select the Data Register by pulling RS HIGH
 102:	8b b3       	in	r24, 0x1b	; 27
 104:	81 60       	ori	r24, 0x01	; 1
 106:	8b bb       	out	0x1b, r24	; 27
		control_bus &= ~ ( 1 << rw ) ;	// Select the Write Operation  by pulling RW LOW
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	8b bb       	out	0x1b, r24	; 27
		control_bus |= 1 << en ;	// Send a High-to-Low Pusle at Enable Pin
 10e:	8b b3       	in	r24, 0x1b	; 27
 110:	84 60       	ori	r24, 0x04	; 4
 112:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	00 00       	nop
		_delay_us ( 1 ) ;
		control_bus &= ~ ( 1 << en ) ;
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	8b 7f       	andi	r24, 0xFB	; 251
 11a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	89 ef       	ldi	r24, 0xF9	; 249
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_DataWrite+0x20>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_DataWrite+0x26>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <LCD_DisplayString>:
 * I/P Arguments: String(Address of the string) to be displayed.
 * Return value : None
 *
 */
void LCD_DisplayString ( char *string_ptr )
	{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ec 01       	movw	r28, r24
		while ( *string_ptr )
 130:	03 c0       	rjmp	.+6      	; 0x138 <LCD_DisplayString+0xe>
			LCD_DataWrite ( *string_ptr++ );
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	0e 94 80 00 	call	0x100	; 0x100 <LCD_DataWrite>
 * Return value : None
 *
 */
void LCD_DisplayString ( char *string_ptr )
	{
		while ( *string_ptr )
 138:	88 81       	ld	r24, Y
 13a:	81 11       	cpse	r24, r1
 13c:	fa cf       	rjmp	.-12     	; 0x132 <LCD_DisplayString+0x8>
			LCD_DataWrite ( *string_ptr++ );
	}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <LCD_DisplayNumber>:
 * Return value : none
 *	https://exploreembedded.com/wiki/File:Lcd_displaynumber.png
 *
 */
void LCD_DisplayNumber ( unsigned int num )
	{
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
		LCD_DataWrite ( ( num / 10000 ) + 0x30 ) ;
 152:	7c 01       	movw	r14, r24
 154:	f6 94       	lsr	r15
 156:	e7 94       	ror	r14
 158:	f6 94       	lsr	r15
 15a:	e7 94       	ror	r14
 15c:	f6 94       	lsr	r15
 15e:	e7 94       	ror	r14
 160:	f6 94       	lsr	r15
 162:	e7 94       	ror	r14
 164:	97 01       	movw	r18, r14
 166:	a7 e4       	ldi	r26, 0x47	; 71
 168:	b3 e0       	ldi	r27, 0x03	; 3
 16a:	0e 94 84 01 	call	0x308	; 0x308 <__umulhisi3>
 16e:	8c 01       	movw	r16, r24
 170:	16 95       	lsr	r17
 172:	07 95       	ror	r16
 174:	16 95       	lsr	r17
 176:	07 95       	ror	r16
 178:	16 95       	lsr	r17
 17a:	07 95       	ror	r16
 17c:	80 e3       	ldi	r24, 0x30	; 48
 17e:	80 0f       	add	r24, r16
 180:	0e 94 80 00 	call	0x100	; 0x100 <LCD_DataWrite>
			num = num % 10000 ;
 184:	20 e1       	ldi	r18, 0x10	; 16
 186:	37 e2       	ldi	r19, 0x27	; 39
 188:	02 9f       	mul	r16, r18
 18a:	c0 01       	movw	r24, r0
 18c:	03 9f       	mul	r16, r19
 18e:	90 0d       	add	r25, r0
 190:	12 9f       	mul	r17, r18
 192:	90 0d       	add	r25, r0
 194:	11 24       	eor	r1, r1
 196:	c8 1b       	sub	r28, r24
 198:	d9 0b       	sbc	r29, r25

		LCD_DataWrite ( ( num / 1000 ) + 0x30 ) ;
 19a:	7e 01       	movw	r14, r28
 19c:	f6 94       	lsr	r15
 19e:	e7 94       	ror	r14
 1a0:	f6 94       	lsr	r15
 1a2:	e7 94       	ror	r14
 1a4:	f6 94       	lsr	r15
 1a6:	e7 94       	ror	r14
 1a8:	97 01       	movw	r18, r14
 1aa:	a5 ec       	ldi	r26, 0xC5	; 197
 1ac:	b0 e2       	ldi	r27, 0x20	; 32
 1ae:	0e 94 84 01 	call	0x308	; 0x308 <__umulhisi3>
 1b2:	8c 01       	movw	r16, r24
 1b4:	12 95       	swap	r17
 1b6:	02 95       	swap	r16
 1b8:	0f 70       	andi	r16, 0x0F	; 15
 1ba:	01 27       	eor	r16, r17
 1bc:	1f 70       	andi	r17, 0x0F	; 15
 1be:	01 27       	eor	r16, r17
 1c0:	80 e3       	ldi	r24, 0x30	; 48
 1c2:	80 0f       	add	r24, r16
 1c4:	0e 94 80 00 	call	0x100	; 0x100 <LCD_DataWrite>
			num = num % 1000 ;
 1c8:	28 ee       	ldi	r18, 0xE8	; 232
 1ca:	33 e0       	ldi	r19, 0x03	; 3
 1cc:	02 9f       	mul	r16, r18
 1ce:	c0 01       	movw	r24, r0
 1d0:	03 9f       	mul	r16, r19
 1d2:	90 0d       	add	r25, r0
 1d4:	12 9f       	mul	r17, r18
 1d6:	90 0d       	add	r25, r0
 1d8:	11 24       	eor	r1, r1
 1da:	c8 1b       	sub	r28, r24
 1dc:	d9 0b       	sbc	r29, r25

		LCD_DataWrite ( ( num / 100 ) + 0x30 ) ;
 1de:	7e 01       	movw	r14, r28
 1e0:	f6 94       	lsr	r15
 1e2:	e7 94       	ror	r14
 1e4:	f6 94       	lsr	r15
 1e6:	e7 94       	ror	r14
 1e8:	97 01       	movw	r18, r14
 1ea:	ab e7       	ldi	r26, 0x7B	; 123
 1ec:	b4 e1       	ldi	r27, 0x14	; 20
 1ee:	0e 94 84 01 	call	0x308	; 0x308 <__umulhisi3>
 1f2:	8c 01       	movw	r16, r24
 1f4:	16 95       	lsr	r17
 1f6:	07 95       	ror	r16
 1f8:	80 e3       	ldi	r24, 0x30	; 48
 1fa:	80 0f       	add	r24, r16
 1fc:	0e 94 80 00 	call	0x100	; 0x100 <LCD_DataWrite>
			num = num % 100 ;
 200:	24 e6       	ldi	r18, 0x64	; 100
 202:	20 9f       	mul	r18, r16
 204:	c0 01       	movw	r24, r0
 206:	21 9f       	mul	r18, r17
 208:	90 0d       	add	r25, r0
 20a:	11 24       	eor	r1, r1
 20c:	c8 1b       	sub	r28, r24
 20e:	d9 0b       	sbc	r29, r25

		LCD_DataWrite ( ( num / 10 ) + 0x30 ) ;
 210:	9e 01       	movw	r18, r28
 212:	ad ec       	ldi	r26, 0xCD	; 205
 214:	bc ec       	ldi	r27, 0xCC	; 204
 216:	0e 94 84 01 	call	0x308	; 0x308 <__umulhisi3>
 21a:	8c 01       	movw	r16, r24
 21c:	16 95       	lsr	r17
 21e:	07 95       	ror	r16
 220:	16 95       	lsr	r17
 222:	07 95       	ror	r16
 224:	16 95       	lsr	r17
 226:	07 95       	ror	r16
 228:	80 e3       	ldi	r24, 0x30	; 48
 22a:	80 0f       	add	r24, r16
 22c:	0e 94 80 00 	call	0x100	; 0x100 <LCD_DataWrite>

		LCD_DataWrite ( ( num % 10 ) + 0x30 ) ;
 230:	c8 01       	movw	r24, r16
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	00 0f       	add	r16, r16
 238:	11 1f       	adc	r17, r17
 23a:	00 0f       	add	r16, r16
 23c:	11 1f       	adc	r17, r17
 23e:	00 0f       	add	r16, r16
 240:	11 1f       	adc	r17, r17
 242:	08 0f       	add	r16, r24
 244:	19 1f       	adc	r17, r25
 246:	ce 01       	movw	r24, r28
 248:	80 1b       	sub	r24, r16
 24a:	91 0b       	sbc	r25, r17
 24c:	80 5d       	subi	r24, 0xD0	; 208
 24e:	0e 94 80 00 	call	0x100	; 0x100 <LCD_DataWrite>
	}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	08 95       	ret

00000260 <main>:
#include "LIB/Configuration.h"
#include "LIB/LCD_8_bit.h"
int main(void)
{
	char a = 0;
	LCD_Init();
 260:	0e 94 56 00 	call	0xac	; 0xac <LCD_Init>
	DDRD |= (0 << DDD2) | (0 << DDD3) | (1 << DDD7);
 264:	81 b3       	in	r24, 0x11	; 17
 266:	80 68       	ori	r24, 0x80	; 128
 268:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PORTD2) | (1 << PORTD3);
 26a:	82 b3       	in	r24, 0x12	; 18
 26c:	8c 60       	ori	r24, 0x0C	; 12
 26e:	82 bb       	out	0x12, r24	; 18
	LCD_Clear();
 270:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Clear>
	LCD_GoToXY (0,0);
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_GoToXY>
	LCD_DisplayString ("Hello World!");
 27c:	80 e6       	ldi	r24, 0x60	; 96
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_DisplayString>
 284:	2f e9       	ldi	r18, 0x9F	; 159
 286:	86 e8       	ldi	r24, 0x86	; 134
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x2a>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x34>
 294:	00 00       	nop
	_delay_ms(500);
	LCD_GoToXY (0,0);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_GoToXY>
	LCD_Clear();
 29e:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Clear>
	while (1)
	{
		if (!(PIND & (1 << PIND2)))
 2a2:	82 9b       	sbis	0x10, 2	; 16
 2a4:	14 c0       	rjmp	.+40     	; 0x2ce <main+0x6e>
 2a6:	16 c0       	rjmp	.+44     	; 0x2d4 <main+0x74>
		{
			for (a = 0 ; a <= 20 ; a++)
			{
				LCD_DisplayNumber (a);
 2a8:	8c 2f       	mov	r24, r28
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_DisplayNumber>
				LCD_GoToXY (0,0);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_GoToXY>
 2b8:	83 e2       	ldi	r24, 0x23	; 35
 2ba:	94 ef       	ldi	r25, 0xF4	; 244
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x5c>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x62>
 2c2:	00 00       	nop
				_delay_ms(250);
				PORTD ^= (1 << PORTD7);
 2c4:	82 b3       	in	r24, 0x12	; 18
 2c6:	80 58       	subi	r24, 0x80	; 128
 2c8:	82 bb       	out	0x12, r24	; 18
	LCD_Clear();
	while (1)
	{
		if (!(PIND & (1 << PIND2)))
		{
			for (a = 0 ; a <= 20 ; a++)
 2ca:	cf 5f       	subi	r28, 0xFF	; 255
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <main+0x70>
 2ce:	c0 e0       	ldi	r28, 0x00	; 0
 2d0:	c5 31       	cpi	r28, 0x15	; 21
 2d2:	50 f3       	brcs	.-44     	; 0x2a8 <main+0x48>
				LCD_GoToXY (0,0);
				_delay_ms(250);
				PORTD ^= (1 << PORTD7);
			}
		}
		PORTD |= (0 << PORTD7);
 2d4:	82 b3       	in	r24, 0x12	; 18
 2d6:	82 bb       	out	0x12, r24	; 18
		if (!(PIND & (1 << PIND3)))
 2d8:	83 99       	sbic	0x10, 3	; 16
 2da:	e3 cf       	rjmp	.-58     	; 0x2a2 <main+0x42>
 2dc:	c4 e1       	ldi	r28, 0x14	; 20
		{
			for (a = 20 ; a >= 0 ; a--)
			{
				LCD_DisplayNumber (a);
 2de:	8c 2f       	mov	r24, r28
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_DisplayNumber>
				LCD_GoToXY (0,0);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_GoToXY>
 2ee:	83 e2       	ldi	r24, 0x23	; 35
 2f0:	94 ef       	ldi	r25, 0xF4	; 244
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <main+0x92>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0x98>
 2f8:	00 00       	nop
				_delay_ms(250);
				PORTD ^= (1 << PORTD7);
 2fa:	82 b3       	in	r24, 0x12	; 18
 2fc:	80 58       	subi	r24, 0x80	; 128
 2fe:	82 bb       	out	0x12, r24	; 18
				if (a == 0)
 300:	cc 23       	and	r28, r28
 302:	79 f2       	breq	.-98     	; 0x2a2 <main+0x42>
			}
		}
		PORTD |= (0 << PORTD7);
		if (!(PIND & (1 << PIND3)))
		{
			for (a = 20 ; a >= 0 ; a--)
 304:	c1 50       	subi	r28, 0x01	; 1
				LCD_GoToXY (0,0);
				_delay_ms(250);
				PORTD ^= (1 << PORTD7);
				if (a == 0)
					break;
			}
 306:	eb cf       	rjmp	.-42     	; 0x2de <main+0x7e>

00000308 <__umulhisi3>:
 308:	a2 9f       	mul	r26, r18
 30a:	b0 01       	movw	r22, r0
 30c:	b3 9f       	mul	r27, r19
 30e:	c0 01       	movw	r24, r0
 310:	a3 9f       	mul	r26, r19
 312:	70 0d       	add	r23, r0
 314:	81 1d       	adc	r24, r1
 316:	11 24       	eor	r1, r1
 318:	91 1d       	adc	r25, r1
 31a:	b2 9f       	mul	r27, r18
 31c:	70 0d       	add	r23, r0
 31e:	81 1d       	adc	r24, r1
 320:	11 24       	eor	r1, r1
 322:	91 1d       	adc	r25, r1
 324:	08 95       	ret

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
