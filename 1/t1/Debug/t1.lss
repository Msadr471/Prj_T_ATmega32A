
t1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000628  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000570  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000260  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000309  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000012b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001345  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define F_CPU 1000000UL
#include <util/delay.h>
int main(void)
{
	DDRB |= 0x00;
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0x01;
  70:	88 b3       	in	r24, 0x18	; 24
  72:	81 60       	ori	r24, 0x01	; 1
  74:	88 bb       	out	0x18, r24	; 24
	DDRD |= 0x80;
  76:	81 b3       	in	r24, 0x11	; 17
  78:	80 68       	ori	r24, 0x80	; 128
  7a:	81 bb       	out	0x11, r24	; 17
    while (1)
    {
		if (PINB == 0)
  7c:	86 b3       	in	r24, 0x16	; 22
  7e:	81 11       	cpse	r24, r1
  80:	12 c0       	rjmp	.+36     	; 0xa6 <main+0x3a>
		{
			PORTD |= 0x80;
  82:	82 b3       	in	r24, 0x12	; 18
  84:	80 68       	ori	r24, 0x80	; 128
  86:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	87 ea       	ldi	r24, 0xA7	; 167
  8a:	91 e6       	ldi	r25, 0x61	; 97
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x20>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
			_delay_ms(100);
			PORTD &= ~0x80;
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	82 bb       	out	0x12, r24	; 18
  9a:	87 ea       	ldi	r24, 0xA7	; 167
  9c:	91 e6       	ldi	r25, 0x61	; 97
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x32>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
			_delay_ms(100);
		}
		PORTD = 0x00;
  a6:	12 ba       	out	0x12, r1	; 18
    }
  a8:	e9 cf       	rjmp	.-46     	; 0x7c <main+0x10>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
