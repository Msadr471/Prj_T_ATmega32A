
RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000104b  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008bb  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000845  00000000  00000000  00001da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  000025ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000468  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a38  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000036a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  64:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_CmdWrite>:
 */
void LCD_DisplayString ( char *string_ptr )
	{
		while ( *string_ptr )
			LCD_DataWrite ( *string_ptr++ );
	}
  6c:	88 bb       	out	0x18, r24	; 24
  6e:	8b b3       	in	r24, 0x1b	; 27
  70:	8e 7f       	andi	r24, 0xFE	; 254
  72:	8b bb       	out	0x1b, r24	; 27
  74:	8b b3       	in	r24, 0x1b	; 27
  76:	8d 7f       	andi	r24, 0xFD	; 253
  78:	8b bb       	out	0x1b, r24	; 27
  7a:	8b b3       	in	r24, 0x1b	; 27
  7c:	84 60       	ori	r24, 0x04	; 4
  7e:	8b bb       	out	0x1b, r24	; 27
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	8a 95       	dec	r24
  84:	f1 f7       	brne	.-4      	; 0x82 <LCD_CmdWrite+0x16>
  86:	00 c0       	rjmp	.+0      	; 0x88 <LCD_CmdWrite+0x1c>
  88:	8b b3       	in	r24, 0x1b	; 27
  8a:	8b 7f       	andi	r24, 0xFB	; 251
  8c:	8b bb       	out	0x1b, r24	; 27
  8e:	8f ec       	ldi	r24, 0xCF	; 207
  90:	97 e0       	ldi	r25, 0x07	; 7
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <LCD_CmdWrite+0x26>
  96:	00 c0       	rjmp	.+0      	; 0x98 <LCD_CmdWrite+0x2c>
  98:	00 00       	nop
  9a:	08 95       	ret

0000009c <LCD_Init>:
  9c:	2f e7       	ldi	r18, 0x7F	; 127
  9e:	88 e3       	ldi	r24, 0x38	; 56
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <LCD_Init+0x6>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_Init+0x10>
  ac:	00 00       	nop
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	88 e3       	ldi	r24, 0x38	; 56
  b6:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_CmdWrite>
  ba:	8e e0       	ldi	r24, 0x0E	; 14
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_CmdWrite>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_CmdWrite>
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_CmdWrite>
  cc:	08 95       	ret

000000ce <LCD_Clear>:
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_CmdWrite>
  d4:	80 e8       	ldi	r24, 0x80	; 128
  d6:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_CmdWrite>
  da:	08 95       	ret

000000dc <LCD_GoToXY>:
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	50 f4       	brcc	.+20     	; 0xf4 <LCD_GoToXY+0x18>
  e0:	20 e4       	ldi	r18, 0x40	; 64
  e2:	82 9f       	mul	r24, r18
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	60 31       	cpi	r22, 0x10	; 16
  ec:	08 f4       	brcc	.+2      	; 0xf0 <LCD_GoToXY+0x14>
  ee:	86 0f       	add	r24, r22
  f0:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_CmdWrite>
  f4:	08 95       	ret

000000f6 <LCD_DataWrite>:
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	8b b3       	in	r24, 0x1b	; 27
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	8b bb       	out	0x1b, r24	; 27
 104:	8b b3       	in	r24, 0x1b	; 27
 106:	84 60       	ori	r24, 0x04	; 4
 108:	8b bb       	out	0x1b, r24	; 27
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_DataWrite+0x16>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_DataWrite+0x1c>
 112:	8b b3       	in	r24, 0x1b	; 27
 114:	8b 7f       	andi	r24, 0xFB	; 251
 116:	8b bb       	out	0x1b, r24	; 27
 118:	8f ec       	ldi	r24, 0xCF	; 207
 11a:	97 e0       	ldi	r25, 0x07	; 7
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_DataWrite+0x26>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_DataWrite+0x2c>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <LCD_DisplayNumber>:
 * Return value : none
 *	https://exploreembedded.com/wiki/File:Lcd_displaynumber.png
 *
 */
void LCD_DisplayNumber ( unsigned int num )
	{
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
		LCD_DataWrite ( ( num / 10000 ) + 0x30 ) ;
 134:	7c 01       	movw	r14, r24
 136:	f6 94       	lsr	r15
 138:	e7 94       	ror	r14
 13a:	f6 94       	lsr	r15
 13c:	e7 94       	ror	r14
 13e:	f6 94       	lsr	r15
 140:	e7 94       	ror	r14
 142:	f6 94       	lsr	r15
 144:	e7 94       	ror	r14
 146:	97 01       	movw	r18, r14
 148:	a7 e4       	ldi	r26, 0x47	; 71
 14a:	b3 e0       	ldi	r27, 0x03	; 3
 14c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__umulhisi3>
 150:	8c 01       	movw	r16, r24
 152:	16 95       	lsr	r17
 154:	07 95       	ror	r16
 156:	16 95       	lsr	r17
 158:	07 95       	ror	r16
 15a:	16 95       	lsr	r17
 15c:	07 95       	ror	r16
 15e:	80 e3       	ldi	r24, 0x30	; 48
 160:	80 0f       	add	r24, r16
 162:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_DataWrite>
			num = num % 10000 ;
 166:	20 e1       	ldi	r18, 0x10	; 16
 168:	37 e2       	ldi	r19, 0x27	; 39
 16a:	02 9f       	mul	r16, r18
 16c:	c0 01       	movw	r24, r0
 16e:	03 9f       	mul	r16, r19
 170:	90 0d       	add	r25, r0
 172:	12 9f       	mul	r17, r18
 174:	90 0d       	add	r25, r0
 176:	11 24       	eor	r1, r1
 178:	c8 1b       	sub	r28, r24
 17a:	d9 0b       	sbc	r29, r25

		LCD_DataWrite ( ( num / 1000 ) + 0x30 ) ;
 17c:	7e 01       	movw	r14, r28
 17e:	f6 94       	lsr	r15
 180:	e7 94       	ror	r14
 182:	f6 94       	lsr	r15
 184:	e7 94       	ror	r14
 186:	f6 94       	lsr	r15
 188:	e7 94       	ror	r14
 18a:	97 01       	movw	r18, r14
 18c:	a5 ec       	ldi	r26, 0xC5	; 197
 18e:	b0 e2       	ldi	r27, 0x20	; 32
 190:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__umulhisi3>
 194:	8c 01       	movw	r16, r24
 196:	12 95       	swap	r17
 198:	02 95       	swap	r16
 19a:	0f 70       	andi	r16, 0x0F	; 15
 19c:	01 27       	eor	r16, r17
 19e:	1f 70       	andi	r17, 0x0F	; 15
 1a0:	01 27       	eor	r16, r17
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	80 0f       	add	r24, r16
 1a6:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_DataWrite>
			num = num % 1000 ;
 1aa:	28 ee       	ldi	r18, 0xE8	; 232
 1ac:	33 e0       	ldi	r19, 0x03	; 3
 1ae:	02 9f       	mul	r16, r18
 1b0:	c0 01       	movw	r24, r0
 1b2:	03 9f       	mul	r16, r19
 1b4:	90 0d       	add	r25, r0
 1b6:	12 9f       	mul	r17, r18
 1b8:	90 0d       	add	r25, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	c8 1b       	sub	r28, r24
 1be:	d9 0b       	sbc	r29, r25

		LCD_DataWrite ( ( num / 100 ) + 0x30 ) ;
 1c0:	7e 01       	movw	r14, r28
 1c2:	f6 94       	lsr	r15
 1c4:	e7 94       	ror	r14
 1c6:	f6 94       	lsr	r15
 1c8:	e7 94       	ror	r14
 1ca:	97 01       	movw	r18, r14
 1cc:	ab e7       	ldi	r26, 0x7B	; 123
 1ce:	b4 e1       	ldi	r27, 0x14	; 20
 1d0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__umulhisi3>
 1d4:	8c 01       	movw	r16, r24
 1d6:	16 95       	lsr	r17
 1d8:	07 95       	ror	r16
 1da:	80 e3       	ldi	r24, 0x30	; 48
 1dc:	80 0f       	add	r24, r16
 1de:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_DataWrite>
			num = num % 100 ;
 1e2:	24 e6       	ldi	r18, 0x64	; 100
 1e4:	20 9f       	mul	r18, r16
 1e6:	c0 01       	movw	r24, r0
 1e8:	21 9f       	mul	r18, r17
 1ea:	90 0d       	add	r25, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	c8 1b       	sub	r28, r24
 1f0:	d9 0b       	sbc	r29, r25

		LCD_DataWrite ( ( num / 10 ) + 0x30 ) ;
 1f2:	9e 01       	movw	r18, r28
 1f4:	ad ec       	ldi	r26, 0xCD	; 205
 1f6:	bc ec       	ldi	r27, 0xCC	; 204
 1f8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__umulhisi3>
 1fc:	8c 01       	movw	r16, r24
 1fe:	16 95       	lsr	r17
 200:	07 95       	ror	r16
 202:	16 95       	lsr	r17
 204:	07 95       	ror	r16
 206:	16 95       	lsr	r17
 208:	07 95       	ror	r16
 20a:	80 e3       	ldi	r24, 0x30	; 48
 20c:	80 0f       	add	r24, r16
 20e:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_DataWrite>

		LCD_DataWrite ( ( num % 10 ) + 0x30 ) ;
 212:	c8 01       	movw	r24, r16
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	00 0f       	add	r16, r16
 21a:	11 1f       	adc	r17, r17
 21c:	00 0f       	add	r16, r16
 21e:	11 1f       	adc	r17, r17
 220:	00 0f       	add	r16, r16
 222:	11 1f       	adc	r17, r17
 224:	08 0f       	add	r16, r24
 226:	19 1f       	adc	r17, r25
 228:	ce 01       	movw	r24, r28
 22a:	80 1b       	sub	r24, r16
 22c:	91 0b       	sbc	r25, r17
 22e:	80 5d       	subi	r24, 0xD0	; 208
 230:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_DataWrite>
	}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <UART_Init>:
 * Return value: none
 *
 */
 void UART_Init ( )
	 {
		 UCSRB = 0x18 ;   // Enable Receiver and Transmitter
 242:	88 e1       	ldi	r24, 0x18	; 24
 244:	8a b9       	out	0x0a, r24	; 10
		 UCSRC = 0x86 ;   // Asynchronous mode 8-bit data and 1-stop bit
 246:	86 e8       	ldi	r24, 0x86	; 134
 248:	80 bd       	out	0x20, r24	; 32
		 UCSRA = 0x00 ;   // Normal Baud rate(no doubling), Single processor commn
 24a:	1b b8       	out	0x0b, r1	; 11
		 UBRRH = 0 ;
 24c:	10 bc       	out	0x20, r1	; 32
		 UBRRL = 71 ;     // 9600 Baud rate at 1MHz
 24e:	87 e4       	ldi	r24, 0x47	; 71
 250:	89 b9       	out	0x09, r24	; 9
 252:	08 95       	ret

00000254 <UART_RxChar>:
 * Return value : char
 *
 */
char UART_RxChar ( )
	{
		while ( ( UCSRA & ( 1 << RXC ) ) == 0 ) ;   // Wait till the data is received
 254:	5f 9b       	sbis	0x0b, 7	; 11
 256:	fe cf       	rjmp	.-4      	; 0x254 <UART_RxChar>
		return ( UDR ) ;                    // return the received char
 258:	8c b1       	in	r24, 0x0c	; 12
	}
 25a:	08 95       	ret

0000025c <main>:
#include <stdio.h>
#include "LIB/Configuration.h"
#include "LIB/LCD_8_bit.h"
#include "LIB/UART.h"
int main(void)
{
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
	char num = 0;
	unsigned char data_rx;
	UART_Init();
 262:	0e 94 21 01 	call	0x242	; 0x242 <UART_Init>
	LCD_Init();
 266:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_Init>
#include "LIB/Configuration.h"
#include "LIB/LCD_8_bit.h"
#include "LIB/UART.h"
int main(void)
{
	char num = 0;
 26a:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char data_rx;
	UART_Init();
	LCD_Init();
	while (1)
	{
		data_rx = UART_RxChar();
 26c:	0e 94 2a 01 	call	0x254	; 0x254 <UART_RxChar>
 270:	c8 2f       	mov	r28, r24
		if (data_rx == 0xFE)
 272:	8e 3f       	cpi	r24, 0xFE	; 254
 274:	91 f4       	brne	.+36     	; 0x29a <main+0x3e>
		{
			LCD_DisplayNumber(num++);
 276:	11 e0       	ldi	r17, 0x01	; 1
 278:	1d 0f       	add	r17, r29
 27a:	8d 2f       	mov	r24, r29
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 93 00 	call	0x126	; 0x126 <LCD_DisplayNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	2f e7       	ldi	r18, 0x7F	; 127
 284:	8a e1       	ldi	r24, 0x1A	; 26
 286:	96 e0       	ldi	r25, 0x06	; 6
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x2c>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x36>
 292:	00 00       	nop
			_delay_ms(250);
			if (data_rx == 0xFF)
 294:	cf 3f       	cpi	r28, 0xFF	; 255
 296:	e1 f0       	breq	.+56     	; 0x2d0 <main+0x74>
	while (1)
	{
		data_rx = UART_RxChar();
		if (data_rx == 0xFE)
		{
			LCD_DisplayNumber(num++);
 298:	d1 2f       	mov	r29, r17
			_delay_ms(250);
			if (data_rx == 0xFF)
				break;
		}
		if (data_rx == 0xFD)
 29a:	cd 3f       	cpi	r28, 0xFD	; 253
 29c:	91 f4       	brne	.+36     	; 0x2c2 <main+0x66>
		{
			LCD_DisplayNumber(num--);
 29e:	1f ef       	ldi	r17, 0xFF	; 255
 2a0:	1d 0f       	add	r17, r29
 2a2:	8d 2f       	mov	r24, r29
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 93 00 	call	0x126	; 0x126 <LCD_DisplayNumber>
 2aa:	2f e7       	ldi	r18, 0x7F	; 127
 2ac:	8a e1       	ldi	r24, 0x1A	; 26
 2ae:	96 e0       	ldi	r25, 0x06	; 6
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <main+0x54>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x5e>
 2ba:	00 00       	nop
			_delay_ms(250);
			if (data_rx == 0xFF)
 2bc:	cf 3f       	cpi	r28, 0xFF	; 255
 2be:	41 f0       	breq	.+16     	; 0x2d0 <main+0x74>
			if (data_rx == 0xFF)
				break;
		}
		if (data_rx == 0xFD)
		{
			LCD_DisplayNumber(num--);
 2c0:	d1 2f       	mov	r29, r17
			_delay_ms(250);
			if (data_rx == 0xFF)
				break;
		}
		LCD_GoToXY(0,0);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_GoToXY>
		LCD_Clear();
 2ca:	0e 94 67 00 	call	0xce	; 0xce <LCD_Clear>
	}
 2ce:	ce cf       	rjmp	.-100    	; 0x26c <main+0x10>
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	08 95       	ret

000002dc <__umulhisi3>:
 2dc:	a2 9f       	mul	r26, r18
 2de:	b0 01       	movw	r22, r0
 2e0:	b3 9f       	mul	r27, r19
 2e2:	c0 01       	movw	r24, r0
 2e4:	a3 9f       	mul	r26, r19
 2e6:	70 0d       	add	r23, r0
 2e8:	81 1d       	adc	r24, r1
 2ea:	11 24       	eor	r1, r1
 2ec:	91 1d       	adc	r25, r1
 2ee:	b2 9f       	mul	r27, r18
 2f0:	70 0d       	add	r23, r0
 2f2:	81 1d       	adc	r24, r1
 2f4:	11 24       	eor	r1, r1
 2f6:	91 1d       	adc	r25, r1
 2f8:	08 95       	ret

000002fa <_exit>:
 2fa:	f8 94       	cli

000002fc <__stop_program>:
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <__stop_program>
